flags: 0
blocks: <h2>Basic module structure</h2><div class="highlight"><pre><span style="color: #6ab825; font-weight: bold">use</span> <span style="color: #d0d0d0">strict;</span>
	<span style="color: #6ab825; font-weight: bold">use</span> <span style="color: #d0d0d0">warnings;</span>
	
	<span style="color: #24909d">package</span> <span style="color: #d0d0d0">ProgArm;</span>
	<span style="color: #6ab825; font-weight: bold">our</span><span style="color: #d0d0d0">(</span><span style="color: #40ffff">%Keys</span><span style="color: #d0d0d0">);</span>
	
	<span style="color: #40ffff">@Keys</span><span style="color: #d0d0d0">{MyNewSub}</span> <span style="color: #d0d0d0">=</span> <span style="color: #ed9d13">&#39;g&#39;</span><span style="color: #d0d0d0">;</span>
	
	<span style="color: #6ab825; font-weight: bold">sub </span><span style="color: #447fcf">MyNewSub</span> <span style="color: #d0d0d0">{</span>
	    <span style="color: #999999; font-style: italic"># Write your code here</span>
	<span style="color: #d0d0d0">}</span>
	</pre></div>
	<h2>Repeats</h2><p>By default actions are called without any parameters, however <code>repeat.pl</code> will pass <strong>1</strong> or <strong>-1</strong> to indicate repeat and negative repeat.</p><p>The longest way to detect negative repeat is to use<br /></p><div class="highlight"><pre><span style="color: #6ab825; font-weight: bold">if</span> <span style="color: #24909d">defined</span> <span style="color: #40ffff">$_</span><span style="color: #d0d0d0">[</span><span style="color: #3677a9">0</span><span style="color: #d0d0d0">]</span> <span style="color: #6ab825; font-weight: bold">and</span> <span style="color: #40ffff">$_</span><span style="color: #d0d0d0">[</span><span style="color: #3677a9">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">==</span> <span style="color: #d0d0d0">-</span><span style="color: #3677a9">1</span>
	</pre></div>
	<p>You can shorten it to<br /></p><div class="highlight"><pre><span style="color: #6ab825; font-weight: bold">if</span> <span style="color: #d0d0d0">(</span><span style="color: #40ffff">$_</span><span style="color: #d0d0d0">[</span><span style="color: #3677a9">0</span><span style="color: #d0d0d0">]</span> <span style="color: #ed9d13">//</span> <span style="color: #3677a9">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">==</span> <span style="color: #d0d0d0">-</span><span style="color: #3677a9">1</span>
	</pre></div>
	<p>However, it is much easier to use experimental <a class="url http outside" href="http://perldoc.perl.org/perlop.html#Smartmatch-Operator">smartmatch operator</a><br /></p><div class="highlight"><pre><span style="color: #6ab825; font-weight: bold">if</span> <span style="color: #40ffff">$_</span><span style="color: #d0d0d0">[</span><span style="color: #3677a9">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">~~</span> <span style="color: #d0d0d0">-</span><span style="color: #3677a9">1</span>
	</pre></div>
	<p>Even though it is deprecated, all modules use smartmatch operator. You should use it too! (A simple sed command can easily change it in every module, that's why we ask you to respect consistency)</p><p>We can rewrite previous example to handle negative repeats:<br /></p><div class="highlight"><pre><span style="color: #6ab825; font-weight: bold">use</span> <span style="color: #d0d0d0">strict;</span>
	<span style="color: #6ab825; font-weight: bold">use</span> <span style="color: #d0d0d0">warnings;</span>
	
	<span style="color: #24909d">package</span> <span style="color: #d0d0d0">ProgArm;</span>
	<span style="color: #6ab825; font-weight: bold">our</span><span style="color: #d0d0d0">(</span><span style="color: #40ffff">%Keys</span><span style="color: #d0d0d0">);</span>
	
	<span style="color: #40ffff">@Keys</span><span style="color: #d0d0d0">{MyNewSub}</span> <span style="color: #d0d0d0">=</span> <span style="color: #ed9d13">&#39;g&#39;</span><span style="color: #d0d0d0">;</span>
	
	<span style="color: #6ab825; font-weight: bold">sub </span><span style="color: #447fcf">MyNewSub</span> <span style="color: #d0d0d0">{</span>
	    <span style="color: #6ab825; font-weight: bold">return</span> <span style="color: #d0d0d0">MyNewSubNegative()</span> <span style="color: #6ab825; font-weight: bold">if</span> <span style="color: #40ffff">$_</span><span style="color: #d0d0d0">[</span><span style="color: #3677a9">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">~~</span> <span style="color: #d0d0d0">-</span><span style="color: #3677a9">1</span><span style="color: #d0d0d0">;</span>
	    <span style="color: #999999; font-style: italic"># Write your code here</span>
	<span style="color: #d0d0d0">}</span>
	
	<span style="color: #6ab825; font-weight: bold">sub </span><span style="color: #447fcf">MyNewSubNegative</span> <span style="color: #d0d0d0">{</span>
	    <span style="color: #999999; font-style: italic"># Write your code here</span>
	<span style="color: #d0d0d0">}</span>
	</pre></div>
	
diff-minor: <p><strong>Changed:</strong></p>
	<div class="old"><p>&lt;     # <strong class="changes">Wrie</strong> your code here</p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt;     # <strong class="changes">Write</strong> your code here</p></div><p><strong>Changed:</strong></p>
	<div class="old"><p>&lt;     # <strong class="changes">Wrie</strong> your code here</p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt;     # <strong class="changes">Write</strong> your code here</p></div><p><strong>Changed:</strong></p>
	<div class="old"><p>&lt;     # <strong class="changes">Wrie</strong> your code here</p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt;     # <strong class="changes">Write</strong> your code here</p></div>
ts: 1427937516
minor: 1
host: 82.131.81.75
username: AlexDaniel
revision: 3
summary: 
diff-major: <p><strong>Changed:</strong></p>
	<div class="old"><p>&lt; ==Basic <strong class="changes">extension</strong> structure</p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt; ==Basic <strong class="changes">module</strong> structure</p></div><p><strong>Changed:</strong></p>
	<div class="old"><p>&lt; Even though it is deprecated, all <strong class="changes">extensions</strong> use smartmatch operator. You should use it too! (A simple sed command can easily change it in every module, that's why we ask you to respect consistency)</p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt; Even though it is deprecated, all <strong class="changes">modules</strong> use smartmatch operator. You should use it too! (A simple sed command can easily change it in every module, that's why we ask you to respect consistency)</p></div>
languages: 
text: ==Basic module structure
	{{{
	use strict;
	use warnings;
	
	package ProgArm;
	our(%Keys);
	
	@Keys{MyNewSub} = 'g';
	
	sub MyNewSub {
	    # Write your code here
	}
	}}}
	
	==Repeats
	By default actions are called without any parameters, however {{{repeat.pl}}} will pass **1** or **-1** to indicate repeat and negative repeat.
	
	The longest way to detect negative repeat is to use
	{{{
	if defined $_[0] and $_[0] == -1
	}}}
	
	You can shorten it to
	{{{
	if ($_[0] // 0) == -1
	}}}
	
	However, it is much easier to use experimental [[http://perldoc.perl.org/perlop.html#Smartmatch-Operator smartmatch operator]]
	{{{
	if $_[0] ~~ -1
	}}}
	Even though it is deprecated, all modules use smartmatch operator. You should use it too! (A simple sed command can easily change it in every module, that's why we ask you to respect consistency)
	
	We can rewrite previous example to handle negative repeats:
	{{{
	use strict;
	use warnings;
	
	package ProgArm;
	our(%Keys);
	
	@Keys{MyNewSub} = 'g';
	
	sub MyNewSub {
	    return MyNewSubNegative() if $_[0] ~~ -1;
	    # Write your code here
	}
	
	sub MyNewSubNegative {
	    # Write your code here
	}
	}}}
	
lastmajor: 2
keep-ts: 1427937516
